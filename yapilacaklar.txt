Kullanıcı siteye her giriş yaptığında üzerinde çalıştığı projeyi seçeceği bir proje seçim sayfası yapılacak(done)

Tedarikçi Sayfası Yapılacak(done)

Tüketici Sayfası Yapılacak(done)

tedarikçi ve tüketici views.py kodları

Ambar Giriş/Çıkış Sayfası Giriş ve Çıkış olarak 2 ayrı safaya bölünecek.(done)

Ambar Giriş ve Çıkışlarda kullanıcı fotoğraf da yüklemek zorunda olacak.(eklenebiliyor, dizayn düzeltilecek, zorunlu hallere getirilecek)
 
Ambar Çıkışında kullanıcının otomatik hazırlanmış PDF indirme butonu eklencek.(OK)

Program içindek Tüm ADD fonksiyonları, önceki programdaki Edit Windowu gibi olacak, exceden yükleme şuan için olmayacak.

Ambardaki veriler değişti, düzenlenmesi gerek.(done)

Ambar Muhasebe kısmındaki veriler değişti, düzenlenmesi gerek.(done)

Kullanıcı oluşturma sayfası yapılacak.(done)

Malzeme Grup ve Grup kodu oluşturup, düzenleme sayfası yapılacak.

Malzeme koduna göre artılıp o malzemenin şuana kadar hangi tedarikçiden alınıp, hangi tüketiciye verildiğini gösteren bir Search Sayfası(done)


Analiz Sayfaları eklencek.




In below code, I need to set name before exporting occurs. To do this, get salers list from this Django code: class CollapsedSalerView(APIView):
    permission_classes = (IsAuthenticated,)
    authentication_classes = (JWTAuthentication,)
    
    def get(self, request, *args, **kwargs):
        active_salers = Salers.objects.filter(is_deleted=False, is_active_saler=True)
        print(active_salers)
        active_salers_list = [[saler.id, saler.name, saler.is_active] for saler in active_salers]
        passive_salers = Salers.objects.filter(is_deleted=False, is_passive_saler=True)
        passive_salers_list = [[saler.id, saler.name, saler.is_active] for saler in passive_salers]
        
        return JsonResponse({"active_salers_list": active_salers_list,
                             "passive_salers_list": passive_salers_list}, safe=False)  by an fetch api call and  then use its names(not id or anything else) as dropdown options for export. After an saler is clicked and export button is clicked, then send it to this Djnago cod by api call again: " class ExportSalerPerfomanceView(APIView):
    permission_classes = (IsAuthenticated,)
    authentication_classes = (JWTAuthentication,)

    def get(self, request, *args, **kwargs):
        def set_column_widths(worksheet):
            for column_cells in worksheet.columns:
                length = max(len(str(cell.value)) for cell in column_cells)
                worksheet.column_dimensions[column_cells[0].column_letter].width = length + 2
        data = json.loads(request.body)
        saler_name = data.get('saler_name')
        if not saler_name:
            return JsonResponse({"error": "Missing 'saler_name' query parameter"}, status=400)

        saler_performances = SalerPerformance.objects.filter(name=saler_name).values()
        jalali_date= current_jalali_date().strftime('%Y-%m-%d')

        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = f"Saler Performance {saler_name} {jalali_date}"

        # Write the header row
        header = ['Name', 'Year', 'Month', 'Day', 'Sale', 'Bonus']
        for col_num, column_title in enumerate(header, 1):
            cell = ws.cell(row=1, column=col_num)
            cell.value = column_title
            cell.font = openpyxl.styles.Font(bold=True)
            cell.fill = openpyxl.styles.PatternFill(start_color='BFEFFF', end_color='BFEFFF', fill_type='solid')
            cell.border = openpyxl.styles.Border(top=openpyxl.styles.Side(style='medium'),
                                                 bottom=openpyxl.styles.Side(style='medium'),
                                                 left=openpyxl.styles.Side(style='medium'),
                                                 right=openpyxl.styles.Side(style='medium'))
        # Write the data rows
        for row_num, performance in enumerate(saler_performances, 2):
            row = [performance['name'], performance['year'], performance['month'], performance['day'], performance['sale'], performance['bonus']]
            for col_num, cell_value in enumerate(row, 1):
                cell = ws.cell(row=row_num, column=col_num)
                cell.value = cell_value
        # Apply some styling to the Excel file
        for row in ws.iter_rows(min_row=1, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
            for cell in row:
                cell.border = openpyxl.styles.Border(top=openpyxl.styles.Side(style='thin'),
                                                     bottom=openpyxl.styles.Side(style='thin'),
                                                     left=openpyxl.styles.Side(style='thin'),
                                                     right=openpyxl.styles.Side(style='thin'))
                cell.alignment = openpyxl.styles.Alignment(horizontal='center')
        # Set the column widths
        set_column_widths(ws)

        # Apply auto filter
        ws.auto_filter.ref = f"A1:F{ws.max_row}"

        # Set the response headers for an Excel file
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)
        content = buffer.read()

        # Encode the content in base64
        base64_content = base64.b64encode(content).decode()

        # Send the content and filename in the JSON response
        return JsonResponse({'filename': f'saler_performance_{saler_name}({jalali_date}).xlsx', 'content': base64_content})"  You can adjust this handleExportClick by sending additional staff name to API call: " async function handleExportClick() {
      // Retrieve the access token from localForage
      const access_token = await localforage.getItem('access_token');
    
      // Make an AJAX request to the backend to download the CSV file
      const response = await fetch(`${process.env.REACT_APP_PUBLIC_URL}/export_staff/`, {
        headers: {
          'Authorization': 'Bearer '+ String(access_token)
        },
      });
    
      // Parse the JSON response
      const data = await response.json();
    
      // Extract the filename and content from the JSON response
      const filename = data.filename;
      const base64Content = data.content;
    
      // Convert the base64 content to a Blob
      const binaryContent = atob(base64Content);
      const byteNumbers = new Array(binaryContent.length);
      for (let i = 0; i < binaryContent.length; i++) {
        byteNumbers[i] = binaryContent.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    
      // Create a link to download the file and simulate a click to download it
      const link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.download = filename;
      link.click();
    }"




